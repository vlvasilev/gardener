// Code generated by go-bindata.
// sources:
// scripts/execute-cloud-config.tpl.sh
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsExecuteCloudConfigTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x73\xda\x48\x12\x7e\xd7\x5f\xd1\x51\x54\xb1\xd9\xf2\xc0\x26\xb5\x75\x0f\xec\xb2\x75\x04\x94\x1f\x15\x1b\x52\x80\x7d\xb5\x77\x49\x91\x41\x6a\x60\x82\x34\xa3\xcc\x8c\xec\x38\x98\xff\xfd\xaa\x67\x24\x8c\x6d\x88\xbd\x0f\xfb\x84\x18\xf5\x7c\xd3\xdd\xf3\xf5\xd7\xad\xe7\xcf\x5a\x33\x21\x5b\x33\x6e\x96\xc0\xb0\x0c\x82\x8f\xdd\xc9\xbb\x69\xef\x74\x78\xde\xef\x0d\x07\x6f\xde\xbf\x9d\xf6\x87\xff\x19\x9c\x0e\xbb\xfd\x78\x34\x1d\xc7\xa3\x8b\x78\xd4\x09\xd7\x6b\x68\x16\xdc\x2e\x7b\x1a\x53\x94\x56\xf0\xcc\x8c\x51\x5f\xa2\x86\xcd\x26\xfc\x29\x42\xaf\x3b\xed\xc5\xa3\xc9\x5e\x88\x5e\xb7\x87\xda\xee\x85\xb8\xb5\xef\xab\x2b\x99\x29\x9e\x62\xda\xcb\x54\x99\xf6\x94\x9c\x8b\xc5\xfe\x63\x87\xa7\xfd\x4e\x18\xad\xef\xaf\x6f\x9a\x2a\x4b\x6b\xf3\x77\x71\xef\xc3\xf8\xfc\x6c\x2f\xfe\x12\x93\x95\x29\x73\x07\x1e\xe4\xab\x54\x68\x60\x05\x3c\xb0\x34\x7d\xa1\x31\xb1\x4a\x5f\x93\xe5\xed\xfb\x0f\xe5\x0c\x33\xb4\x77\xde\x06\xc1\xbc\x94\x89\x15\x4a\x42\xaa\x92\x15\x6a\x56\x68\x24\x90\xe3\x06\xac\x03\x00\xc9\x73\xec\x84\xd1\xcb\x30\x00\x10\x39\x5f\xd0\x9f\x57\xf4\x07\x93\xa5\x82\xd0\xb9\x24\xe4\x02\xae\x96\x68\x97\xa8\xc1\x2a\xa8\x00\x20\xa2\xbd\x30\xd7\x2a\x87\xc8\x6d\x75\x18\x73\xf8\x1f\xb0\x1f\x10\x1d\xfb\xe3\x3c\xa8\x01\xf6\x0d\xc2\xca\xaa\x01\x9f\x7f\x07\xbb\x44\x19\x00\xd4\xe7\x7c\xf4\x98\x74\xd2\x5e\x58\xa8\xbc\x87\xa2\xcc\xb2\x2d\x12\xb9\x99\x19\xdc\xc1\x19\x28\x90\x88\xe9\xa3\x6e\xce\x45\xb0\x09\x82\xf5\x9a\xfc\x6d\xae\xaa\xbc\x71\xcb\x2f\x54\x56\xe6\x08\x6c\xb3\xb9\xcd\xdb\x5c\xe9\x9c\x5b\x96\x72\xcb\x59\x8a\x97\x22\xc1\x2a\x77\xa7\xdd\xd7\xf1\x69\xe7\xc3\xf9\xeb\xb8\x1f\x5f\xf8\xd8\x9f\xc1\x2c\x5b\x89\x14\x18\xcb\xf8\x0c\x33\x88\x9c\x0d\xfc\xd9\x4a\xf1\xb2\x25\xcb\x2c\xdb\x89\xbc\x1f\x5f\xbc\xef\xc5\xe3\x4e\x74\x9c\x99\x59\xb6\x02\x96\xce\x8c\xfc\x08\x4c\xc1\xa0\x7b\x16\x9f\x7c\xec\x8e\x26\x93\xbf\x3e\xc6\x27\x6f\xc6\xee\x67\xfc\xfe\xbf\x71\xc3\x6d\x3c\xeb\x4e\x7a\xef\xde\x0f\xde\x4e\x6f\x11\x7c\xf4\x51\xb5\x10\xc2\x0d\x2c\x34\x16\x70\x54\x83\x74\xc2\xb0\xf9\x8b\x07\x72\x8f\x04\xe6\x29\xf8\x20\xf8\xa6\x11\x3f\x90\xa8\x73\xd4\xd8\x49\xec\x19\xb7\xc9\x92\xae\xa7\xb2\x07\x4a\x07\xf8\x74\xc0\xec\x1a\xdc\xa6\x36\xfc\x1c\xd1\xe1\x4d\xba\xa3\xb7\xf1\xa4\xf2\x7d\x4a\xa1\xde\xfa\x7f\x3f\x32\x0a\x64\x89\x3c\x05\x26\x5f\xc2\x0d\x24\xa5\x05\x36\x7f\x05\x2c\xfd\x14\xee\x3a\x97\xa2\xc5\xc4\x62\xba\xd7\xb9\xe8\xe1\x81\xde\x91\x7c\x35\x37\x4d\xfc\x6e\x7f\x03\x76\x5a\x5f\x14\x1b\xc2\xb7\x52\x59\x0e\x2c\x86\x8c\xff\xb8\x9e\x0a\xcb\x67\x19\x4e\x85\x14\xb6\xf3\xeb\x89\x5b\xfa\xaa\x4a\x2d\x79\x56\xaf\x39\x7b\x7b\x5d\x60\xa7\x34\xda\xfd\x69\x2f\x74\xe1\x1f\x0a\xfd\xd5\xc3\x81\x23\xc0\x1e\x57\x76\xa2\xf0\x3c\xa3\x30\xb8\x4c\xc1\xf1\x07\xd3\xa7\x86\x42\x5a\xd1\xb2\x79\xd1\xba\xe4\x3a\x13\xb3\xa4\xf0\xeb\xaa\x94\xb6\xe2\x69\x15\xe1\x43\x23\x7f\xba\x33\xa5\xca\xc1\xbc\x80\x44\x15\xd7\x40\x90\x24\x1b\x4f\x71\x20\x29\x80\x71\x20\xdc\x56\x26\x66\xad\x5f\xee\x1e\xd3\x72\x36\xa5\xf7\xe6\x90\x03\x89\x2a\x04\xa6\x5b\x0c\x2a\xe1\xa7\xc5\xbe\x27\xc6\x1a\x83\x29\x48\x71\xce\xcb\xcc\x9a\x93\xfa\x2e\x4e\x50\x6b\xa5\x4d\x47\xa3\xdb\xc9\xb4\xda\x93\x85\x2d\xc2\xd3\x12\xe0\xe5\xe4\xa1\x50\x04\xeb\x35\x03\x94\x29\x6c\xbc\xda\x68\x2e\x17\xe8\x15\xe9\xa4\x52\x23\x68\x77\xa0\x59\x8b\xe4\x66\x13\xdc\x55\x69\x27\xee\x5e\xc1\x6a\xa9\xaf\xb6\x51\x39\xad\xd7\x5b\xf0\x84\x5b\xf8\xe3\x0f\x38\x8a\x87\x6f\x8e\xe0\x06\x66\xdc\xe0\xbf\x7e\x03\x96\xc2\x9f\x10\x46\xf7\x1b\x92\xdb\xd9\x4c\x6e\xdb\xd9\xb9\x41\x4d\xf5\x4a\x50\xf1\xf0\x4d\x10\x38\x19\x7f\x06\x6c\xbe\x67\x37\xb5\xb9\x70\x47\xc3\xad\x2a\x93\xe5\x21\xbb\x60\x2e\x3c\x5a\x0d\x77\xaf\x59\xd1\x4f\xe2\x7c\x18\x21\xcf\x5c\x90\x9f\x3f\xc3\xcd\xcd\xc1\x0d\xbb\xdd\xad\x55\xac\x44\xab\xaa\x79\x96\x64\x02\xa5\x65\x49\xa9\x35\x4a\xdb\x2c\x30\x27\xa8\xad\x97\x3e\x41\xf1\xf0\x0d\x65\xe4\xa0\x13\xaf\x95\xb2\xc6\x6a\x5e\xb8\xfc\x32\xc6\x02\x5e\x88\x0b\xd4\x46\x28\xd9\x86\xcb\x97\xc1\x4a\xc8\xb4\x0d\x3e\x6b\x41\x75\x16\x4b\x94\xb4\xf8\xdd\xb6\x6b\xfd\x61\xb3\x1a\xe6\xdf\x15\xfd\x82\x24\x2b\x8d\x45\x6d\xda\x01\x83\xea\xb9\xed\x2b\x07\xb5\x15\x73\x91\x70\x8b\x8c\x97\x76\xa9\xb4\xb0\xd7\x8e\x43\x6d\x88\x8e\xc9\xeb\x3d\x99\x7d\x38\xdf\x84\xb7\x97\x7e\x03\x56\xd3\xcd\x1f\x7d\x92\x95\x84\x1b\x37\x2a\x3d\x0d\xcf\x4f\x5c\x4e\x5e\x89\x76\x6d\xd8\x46\xe0\x83\xf4\x11\x54\x01\xfb\x08\xaa\x70\xb6\x96\xae\xd8\x0d\xad\x3c\xc8\xc7\x16\xf5\x70\xa6\x68\xa7\x3b\xe4\x80\x61\x50\x81\xbb\x63\xb8\x61\xf4\x87\xe1\x77\xab\x79\x1b\xd6\x1b\xb7\x6a\xd5\x0a\xa5\x6f\x46\xdb\x6d\x13\x5a\xdb\xf2\xbb\x1a\x1b\x74\xfe\x73\x4e\xde\xa5\x43\x45\xe5\x67\x90\x8a\xf9\xbe\xc2\x08\x0f\x16\xcb\x9e\xfe\xef\xf5\x66\x8c\x28\x41\xe2\x15\x6a\x70\xe5\x08\xfe\x5c\xb8\xf4\x94\xab\x26\x2a\xf2\xcf\xeb\x81\x27\x5e\x4f\xe5\x39\x77\x85\xff\x60\x90\x1a\x97\x49\x82\xc6\xcc\xcb\x2c\xbb\x06\x5e\x14\x19\x69\xaa\xc4\xab\x83\xf0\x00\xe6\xda\x58\xcc\x13\x9b\x41\xca\x31\x57\x92\xf9\xa3\x9c\x76\xed\x08\x96\x13\xaa\x52\x0a\x6b\x28\x8b\xf4\x52\xcc\x5d\xa7\x3a\x96\xb5\x45\xe4\xde\x0f\x78\x8e\x7d\xa7\x62\x8d\xbd\xef\x2e\xb8\x3e\x15\xb3\x33\x52\xda\xfd\x06\x3b\x73\xf6\x76\x38\xd6\x0d\x3a\xf5\xae\xbb\x28\xa9\x37\xc3\x8e\x42\xc2\x8b\x17\x3b\xef\x35\x1a\xcb\xb5\x05\xc6\xa4\x62\xb3\x4c\x25\xab\x5d\xdb\x5d\x6d\xde\x79\x3c\x90\xca\x0a\x8b\x9a\x73\x96\x81\x4f\x83\xc6\x39\x6a\x94\x09\xa6\x20\x24\x5d\xc4\x9d\x24\x37\xb7\x9d\xf1\x6f\x30\xc5\xf7\x12\x22\x9a\xce\xf7\x0a\x77\xd0\x1d\x0c\x86\x93\xee\xe4\xfd\x70\x30\x1d\xc5\xe3\x49\x77\x34\x99\x8e\xff\x1a\x4f\xe2\xb3\xbe\x2b\x5d\x37\x0f\x86\x57\x4a\xaf\x50\x37\x17\x5c\xa7\x28\x51\x7b\xa9\x6f\x55\x31\x30\x9f\xa1\x94\x91\x2c\x88\x04\x4d\x18\x04\xcf\x61\xa2\xaf\xa9\xe5\xce\x85\x4c\x61\xa0\x52\x04\x35\xfb\x8a\x89\xa5\xe9\x17\xec\x52\x18\xc8\x39\x0d\x80\x58\x89\xf9\x53\xa5\x7c\x4b\xd0\xf5\xfa\xcb\x60\xd8\x8f\x3b\x61\x74\xdc\x52\x85\x75\xdf\x80\x54\xdb\x74\x51\x8c\xad\xb6\x7b\x3b\xe1\x97\xcd\xe6\x31\xe4\xf5\xfa\x4b\x08\x0b\xb4\x20\xc9\x53\x96\x41\x48\x00\x5a\xa2\x45\xd3\x14\xaa\xb5\x54\xc6\xba\x2f\x9b\xe8\xb8\x7e\x6c\x84\x34\x0d\x2c\x14\xa3\x01\x27\xe3\x16\xdd\xf8\x4b\xe3\xbf\xb0\x98\x1b\x07\x0a\xc7\x42\xa6\xf8\xbd\x5e\xfa\xb5\xd1\xcc\xd1\x72\xd2\xe2\x66\x45\x1a\xbf\xa5\x32\x3b\x6c\xcd\xa5\xa4\xa1\x50\x28\x69\xe0\x53\x18\x3d\xe1\xce\x3e\x85\x44\x70\xe2\xe7\x3f\x81\xed\x3d\xf7\x0c\xdf\x3e\x84\x0d\x4a\x75\x50\x7d\xb4\xb9\x76\xfb\x03\xc2\x88\x6e\xe9\xce\xcd\x01\xd0\x92\x1b\xd4\xc3\xed\xa4\xee\xad\x6e\x80\x5f\xad\xe0\x68\x5d\x68\x21\x2d\x44\x2f\x37\x47\x0d\xcf\xfa\xfb\x2e\x4c\x27\xc3\xda\xbd\xc7\x40\x5e\x55\x20\x54\x04\x00\xcf\xe1\xbc\x48\xb9\x45\x48\xaa\x8f\xe3\x96\xe3\x32\xf3\x74\x70\x7d\x12\x6e\x33\x42\xe3\xda\x2e\x79\xc5\x1c\x0a\x65\x8c\x98\x65\xb8\x2f\x4c\x37\xbe\xd1\xbc\xf1\xe2\x45\xcd\xe9\xe8\xce\x57\xfa\xbd\x3c\x3c\x42\xdc\xc7\xeb\xa1\xf2\x14\x3d\x6f\x77\x9d\x08\x0f\xc7\xd7\xb9\xdb\xb6\x6b\xd7\x88\xd0\x4c\x5d\xa2\xbe\xd2\xc2\xe2\x4e\xc2\x46\x95\xec\x55\x65\x0e\x75\x99\x53\xfc\x1a\xbf\x95\x68\x2c\xa6\x64\xaf\x74\xfd\x8e\xf4\x6b\x7b\x2b\x3f\xb9\x3b\xba\x2c\x83\x29\x84\xa6\x75\xd2\x82\xd6\x22\x6c\xfc\x0e\xe9\xee\xfc\x5c\x9d\x4d\x1f\x8a\xf7\x8e\x87\xa8\x7e\x48\x4b\x24\xa5\x79\x0a\x73\x77\xae\xf6\x7e\xaf\xaa\xc5\x3d\xac\x71\x43\x9a\x1a\xad\x2e\x29\x15\xa9\x92\xf4\xf3\x4f\xde\x57\xb4\x7e\x82\xff\x1b\xe6\xa6\x86\xff\x07\x00\x00\xff\xff\x00\x97\x6f\x36\xf3\x12\x00\x00")

func scriptsExecuteCloudConfigTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsExecuteCloudConfigTplSh,
		"scripts/execute-cloud-config.tpl.sh",
	)
}

func scriptsExecuteCloudConfigTplSh() (*asset, error) {
	bytes, err := scriptsExecuteCloudConfigTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/execute-cloud-config.tpl.sh", size: 4851, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/execute-cloud-config.tpl.sh": scriptsExecuteCloudConfigTplSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"execute-cloud-config.tpl.sh": &bintree{scriptsExecuteCloudConfigTplSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
